{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Majom.Vision.Vision_Types where
import Prelude ( Bool(..), Enum, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 return, length, IO, fromIntegral, fromEnum, toEnum,
                 (.), (&&), (||), (==), (++), ($), (-) )

import Control.Exception
import Data.ByteString.Lazy
import Data.Hashable
import Data.Int
import Data.Text.Lazy ( Text )
import qualified Data.Text.Lazy as TL
import Data.Typeable ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector

import Thrift
import Thrift.Types ()


data Position = Position{f_Position_x :: Maybe Double,f_Position_y :: Maybe Double,f_Position_z :: Maybe Double} deriving (Show,Eq,Typeable)
instance Hashable Position where
  hashWithSalt salt record = salt   `hashWithSalt` f_Position_x record   `hashWithSalt` f_Position_y record   `hashWithSalt` f_Position_z record  
write_Position oprot record = do
  writeStructBegin oprot "Position"
  case f_Position_x record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("x",T_DOUBLE,1)
    writeDouble oprot _v
    writeFieldEnd oprot}
  case f_Position_y record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("y",T_DOUBLE,2)
    writeDouble oprot _v
    writeFieldEnd oprot}
  case f_Position_z record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("z",T_DOUBLE,3)
    writeDouble oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Position_fields iprot record = do
  (_,_t3,_id4) <- readFieldBegin iprot
  if _t3 == T_STOP then return record else
    case _id4 of 
      1 -> if _t3 == T_DOUBLE then do
        s <- readDouble iprot
        read_Position_fields iprot record{f_Position_x=Just s}
        else do
          skip iprot _t3
          read_Position_fields iprot record
      2 -> if _t3 == T_DOUBLE then do
        s <- readDouble iprot
        read_Position_fields iprot record{f_Position_y=Just s}
        else do
          skip iprot _t3
          read_Position_fields iprot record
      3 -> if _t3 == T_DOUBLE then do
        s <- readDouble iprot
        read_Position_fields iprot record{f_Position_z=Just s}
        else do
          skip iprot _t3
          read_Position_fields iprot record
      _ -> do
        skip iprot _t3
        readFieldEnd iprot
        read_Position_fields iprot record
read_Position iprot = do
  _ <- readStructBegin iprot
  record <- read_Position_fields iprot (Position{f_Position_x=Nothing,f_Position_y=Nothing,f_Position_z=Nothing})
  readStructEnd iprot
  return record
